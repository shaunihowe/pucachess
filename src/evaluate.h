// Puca Chess - By Shaun Howe
// https://github.com/shaunihowe/pucachess
// GNU General Public License v3.0 - see file 'LICENSE' for more information

// Evaluation value defines
#define WIN_CHECKMATE 		10000				// win by checkmate
#define LOSE_CHECKMATE		-10000				// lose by checkmate
#define KINGOFFBOARD		-10002				// king is off board

/*
Note:
Evaluation function will never return a value of dead-on 0, it will always
give 1 or -1 centipawns to a player, even if decided just by whose turn it is. (a score of 0 is reserved for a draw)
*/

s_int piecevalues[28] = {
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 295, 325, 500, 900, 0,
	0, 0, 0, 0,
	100, 295, 325, 500, 900, 0
}; // kings given a value just for the benefit of the move ordering
#define PAWN_DOUBLED		   -10			//Doubled pawn punishment
#define PAWN_ISOLATED		   -20			//Isolated pawn punishment
#define PAWN_BLOCKED		   -1			//Punishment for blocked pawn
#define PAWN_BACKWARD		   -8			//Punishment for pawn that protects two other pawns
#define PAWN_PASSEDWITHROOK		15			//Bonus for passed pawns that have a freindly rook behind them, scores as opposite if enemy rook is behind it
#define KNIGHT_EACHPAWN			6			//Knights given an additional 6pts for each pawn remaining (Knights range from 295 to 343)
#define BISHOP_BOTHBONUS        40			//Bishops given a bonus 40 pts if both bishops remain (bishops 325 for one or 690 for both (345 each))
#define MINOR_UNDEVELOPED		-8			//Punishment for each undeveloped minor piece still on home rank during opening
#define ROOK_EACHPAWN		   -10			//Rooks lose 10pts for each pawn remaining (Rooks range from 470 to 550)
#define ROOK_SEMIOPENFILE		10			//Bonus for rooks on semi open file
#define ROOK_OPENFILE			15			//Bonus for rooks on open file
#define ROOK_ADVANCED			15			//Bonus for rooks on 7th or 8th ranks
#define QUEEN_EACHOPPPAWN		8			//Queens given an additional 8pts for each opponents pawn remaining (Queens range from 900 to 964)
#define KING_ENEMYNEXT		   -6			//Punishment for each enemy piece next to king
s_int king_pawns[4] = {-10, 0, 5, 7};		//Bonus for number of friendly pawns next to king


s_int pawn[120] = {
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000,
	000,  0,  0,  0,  0,  0,  0,  0,  0,000,
	000,  0,  0,  0,-40,-40, 20,  0,  0,000,
	000,  1,  2,  3,-10,-10,  3,  2,  1,000,
	000,  2,  4,  6,  8,  8,  6,  4,  2,000,
	000,  3,  6,  9, 12, 12,  9,  6,  3,000,
	000,  4,  8, 12, 16, 16, 12,  8,  4,000,
	000,  5, 10, 15, 20, 20, 15, 10,  5,000,
	000,  6, 12, 20, 24, 24, 20, 12,  6,000,
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000
};
s_int pawn_kingside[120] = {
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000,
	000,  0,  0,  0,  0,  0,  0,  0,  0,000,
	000,  0,  0,  0,-40,-40, 15,  9,  9,000,
	000,  1,  2,  3,-10,-10,  5,  6,  6,000,
	000,  2,  4,  6,  8,  8,  2,  2,  2,000,
	000,  3,  6,  9, 12, 12,  9,  6,  3,000,
	000,  4,  8, 12, 16, 16, 12,  8,  4,000,
	000,  5, 10, 15, 20, 20, 15, 10,  5,000,
	000, 12, 19, 20, 24, 24, 20, 12,  6,000,
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000
};
s_int pawn_queenside[120] = {
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000,
	000,  0,  0,  0,  0,  0,  0,  0,  0,000,
	000,  9,  9,  9,-40,-40,  0,  0,  0,000,
	000,  6,  6,  5,-10,-10,  3,  2,  1,000,
	000,  2,  2,  2,  8,  8,  6,  4,  2,000,
	000,  3,  6,  9, 12, 12,  9,  6,  3,000,
	000,  4,  8, 12, 16, 16, 12,  8,  4,000,
	000,  5, 10, 15, 20, 20, 15, 10,  5,000,
	000,  6, 12, 20, 24, 24, 20, 12,  6,000,
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000
};
s_int pawn_passed[120] = {
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000,
	000,  0,  0,  0,  0,  0,  0,  0,  0,000,
	000, 20, 22, 21, 20, 20, 21, 22, 20,000,
	000, 45, 47, 46, 45, 45, 46, 47, 45,000,
	000, 69, 71, 70, 69, 69, 70, 71, 69,000,
	000, 92, 94, 93, 92, 92, 93, 94, 92,000,
	000,114,116,115,114,114,115,116,114,000,
	000,135,137,136,135,135,136,137,135,000,
	000,  0,  0,  0,  0,  0,  0,  0,  0,000,
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000
};
s_int pawn_passed_kingdistance[120] = {	// x = passed pawn file, y = enemy king file
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000,
	000,  0,  1,  2,  4,  6,  8, 10, 12,000,
	000,  1,  0,  1,  2,  4,  6,  8, 10,000,
	000,  2,  1,  0,  1,  2,  4,  6,  8,000,
	000,  4,  2,  1,  0,  1,  2,  4,  6,000,
	000,  8,  4,  2,  1,  0,  1,  2,  4,000,
	000,  8,  6,  4,  2,  1,  0,  1,  2,000,
	000, 10,  8,  6,  4,  2,  1,  0,  1,000,
	000, 12, 10,  8,  6,  4,  2,  1,  0,000,
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000
};
s_int knight[120] = {
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000,
	000,-13,-12,-11,-10,-10,-11,-12,-13,000,
	000,-12, -5, -4, -3, -3, -4, -5,-12,000,
	000,-11, -4,  2,  3,  3,  2, -4,-11,000,
	000,-10, -3,  3, 10, 10,  3, -3,-10,000,
	000,-10, -3,  3, 10, 10,  3, -3,-10,000,
	000,-11, -4,  2,  3,  3,  2, -4,-11,000,
	000,-12, -5, -4, -3, -3, -4, -5,-12,000,
	000,-13,-12,-11,-10,-10,-11,-12,-13,000,
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000
};
s_int bishop[120] = {
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000,
	000,-10,-11,-12,-13,-13,-12,-11,-10,000,
	000,-11, -3, -4, -5, -5, -4, -3,-11,000,
	000,-12, -4,  4,  3,  3,  4, -4,-12,000,
	000,-13, -5,  3, 10, 10,  3, -5,-13,000,
	000,-13, -5,  3, 10, 10,  3, -5,-13,000,
	000,-12, -4,  4,  3,  3,  4, -4,-12,000,
	000,-11, -3, -4, -5, -5, -4, -3,-11,000,
	000,-10,-11,-12,-13,-13,-12,-11,-10,000,
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000
};
s_int queen_opening[120] = {
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000,
	000,  0,  0,  0, 12,  0,  0,  0,  0,000,
	000,  0,  0,  8,  8,  8,  0,  0,  0,000,
	000,  0,  5,  0,  5,  1,  5,  0,  0,000,
	000,  2,  0,  0,  2,  1,  0,  1,  0,000,
	000,  0,  1,  0,  1,  1,  0,  0,  1,000,
	000,  0,  0,  1,  1,  1,  0,  1,  0,000,
	000,  0,  0,  0,  2,  2,  2,  0,  0,000,
	000,  0,  1,  3,  5,  6,  4,  1,  0,000,
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000
};
s_int queen_kingside[120] = {
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000,
	000,  1,  0,  0,  8,  0,  4,  5,  4,000,
	000,  1,  2,  3,  3,  3,  5,  6,  5,000,
	000,  0,  2,  3,  0,  0,  6,  7,  6,000,
	000,  0,  0,  3,  4,  0,  7,  8,  7,000,
	000,  0,  0,  0,  4,  5,  8,  9,  8,000,
	000,  0,  0,  0,  0,  5,  9, 10,  9,000,
	000,  5,  6,  7,  8,  9, 10, 11, 10,000,
	000,  4,  5,  6,  7,  7,  7,  7,  7,000,
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000
};
s_int queen_queenside[120] = {
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000,
	000,  4,  5,  4,  8,  0,  0,  0,  1,000,
	000,  5,  6,  5,  3,  3,  0,  2,  1,000,
	000,  6,  7,  6,  0,  0,  3,  2,  0,000,
	000,  7,  8,  7,  0,  4,  3,  0,  0,000,
	000,  8,  9,  8,  5,  4,  0,  0,  0,000,
	000,  9, 10,  9,  5,  0,  0,  0,  0,000,
	000, 10, 11, 10,  9,  8,  7,  6,  5,000,
	000,  7,  7,  7,  7,  6,  5,  4,  3,000,
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000
};
s_int king[120] = {
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000,
	000,  0, 20, 40,-20,  0,-20, 40, 20,000,
	000,-40,-40,-40,-40,-40,-40,-40,-40,000,
	000,-50,-50,-50,-50,-50,-50,-50,-50,000,
	000,-60,-60,-60,-60,-60,-60,-60,-60,000,
	000,-60,-60,-60,-60,-60,-60,-60,-60,000,
	000,-60,-60,-60,-60,-60,-60,-60,-60,000,
	000,-60,-60,-60,-60,-60,-60,-60,-60,000,
	000,-60,-60,-60,-60,-60,-60,-60,-60,000,
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000
};
s_int king_endgame[120] = {
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000,
	000,  0,  8, 16, 24, 24, 16,  8,  0,000,
	000, 10, 18, 26, 34, 34, 26, 18, 10,000,
	000, 20, 28, 36, 44, 44, 36, 28, 20,000,
	000, 30, 38, 46, 54, 54, 46, 38, 30,000,
	000, 32, 40, 48, 56, 56, 48, 40, 32,000,
	000, 26, 34, 42, 50, 50, 42, 34, 26,000,
	000, 20, 28, 36, 44, 44, 36, 28, 20,000,
	000, 14, 22, 30, 38, 38, 30, 22, 14,000,
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000
};
s_int king_lone[120] = {
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000,
	000,-80,-85,-90,-95,-95,-90,-85,-80,000,
	000,-85,-45,-45,-45,-45,-45,-45,-85,000,
	000,-90,-45,-20,-20,-20,-20,-45,-90,000,
	000,-95,-45,-20,  0,  0,-20,-45,-95,000,
	000,-95,-45,-20,  0,  0,-20,-45,-95,000,
	000,-90,-45,-20,-20,-20,-20,-45,-90,000,
	000,-85,-45,-45,-45,-45,-45,-45,-85,000,
	000,-80,-85,-90,-95,-95,-90,-85,-80,000,
	000,000,000,000,000,000,000,000,000,000,
	000,000,000,000,000,000,000,000,000,000
};

#define NOMATE_MATERIAL		-350		   // punishment for not having mating material
#define NO_CASTLE			-20				// punishment for not castling

s_int knowledge;                           // how much knowledge to use in evaluation

s_int evaluateboard(struct t_board *board);
